# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Publish Spring Boot 3

on:
  create:
    tags:
      - '*'
  push:
    branches: [ "next" ]
#  release:
#    types: [ created ]

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_PASSWORD: ""

    services:
      redis:
        image: redis:6.2.0

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Import GPG
        run: |
          gpg --version
          GPG_FILE=$RUNNER_TEMP/gpg
          echo $GPG_FILE
          echo "${{ secrets.xuxiaowei_0x30F97859_SECRET }}" > $GPG_FILE
          gpg --import $GPG_FILE

      - name: Set ENV
        shell: sh
        run: |
          docker ps
          SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -qf 'ancestor=redis:6.2.0')`
          echo "SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST=$SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST"
          echo "SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST=$SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST" >> $GITHUB_ENV
          echo ${{ env.SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST }}

      - name: Get ENV
        shell: sh
        run: |
          echo ${{ env.SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_REDIS_HOST }}

      - name: Build with Maven
        run: mvn clean package source:jar javadoc:jar -U -DskipTests=true -Pgpg

      - name: Test
        run: mvn test -DskipTests=false

      - name: Publish to GitHub Packages Apache Maven
        run: mvn source:jar javadoc:jar deploy -Pgithub -Pgpg -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: ossrh
        run: sed -i "s#</servers>#<server><id>ossrh</id><username>${{ secrets.OSSRH_USER }}</username><password>${{ secrets.OSSRH_PASS }}</password></server>&#" $GITHUB_WORKSPACE/settings.xml

      - name: Publish to Maven Central
        run: mvn source:jar javadoc:jar deploy -Possrh -Pgpg -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}
